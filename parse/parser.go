// Code generated by goyacc - DO NOT EDIT.

package parse

import __yyfmt__ "fmt"

import (
	"github.com/scax/gopher-lua/ast"
)

type yySymType struct {
	yys   int
	token ast.Token

	stmts []ast.Stmt
	stmt  ast.Stmt

	funcname *ast.FuncName
	funcexpr *ast.FunctionExpr

	exprlist []ast.Expr
	expr     ast.Expr

	fieldlist []*ast.Field
	field     *ast.Field
	fieldsep  string

	namelist []string
	parlist  *ast.ParList
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57380
	yyEofCode = 57344
	T2Comma   = 57371
	T3Comma   = 57372
	TAnd      = 57346
	TBreak    = 57347
	TDo       = 57348
	TElse     = 57349
	TElseIf   = 57350
	TEnd      = 57351
	TEqeq     = 57367
	TFalse    = 57352
	TFloorDiv = 57378
	TFor      = 57353
	TFunction = 57354
	TGte      = 57370
	TIdent    = 57373
	TIf       = 57355
	TIn       = 57356
	TLocal    = 57357
	TLshift   = 57377
	TLte      = 57369
	TNeq      = 57368
	TNil      = 57358
	TNot      = 57359
	TNumber   = 57374
	TOr       = 57360
	TRepeat   = 57362
	TReturn   = 57361
	TRshift   = 57376
	TString   = 57375
	TThen     = 57363
	TTrue     = 57364
	TUntil    = 57365
	TWhile    = 57366
	UNARY     = 57379
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -102
)

var (
	yyPrec = map[int]int{
		TOr:       0,
		TAnd:      1,
		'>':       2,
		'<':       2,
		TGte:      2,
		TLte:      2,
		TEqeq:     2,
		TNeq:      2,
		T2Comma:   3,
		'+':       4,
		'-':       4,
		'*':       5,
		'/':       5,
		'%':       5,
		TFloorDiv: 5,
		UNARY:     6,
		'^':       7,
		'&':       8,
		'|':       8,
		'~':       8,
		TRshift:   8,
		TLshift:   8,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (148x)
		57373: 1,  // TIdent (147x)
		57354: 2,  // TFunction (136x)
		45:    3,  // '-' (118x)
		126:   4,  // '~' (118x)
		57351: 5,  // TEnd (103x)
		59:    6,  // ';' (102x)
		57348: 7,  // TDo (92x)
		57347: 8,  // TBreak (88x)
		57353: 9,  // TFor (88x)
		57355: 10, // TIf (88x)
		57357: 11, // TLocal (88x)
		57362: 12, // TRepeat (88x)
		57361: 13, // TReturn (88x)
		57366: 14, // TWhile (88x)
		57349: 15, // TElse (87x)
		57350: 16, // TElseIf (87x)
		57365: 17, // TUntil (84x)
		57344: 18, // $end (83x)
		44:    19, // ',' (82x)
		123:   20, // '{' (72x)
		57375: 21, // TString (72x)
		37:    22, // '%' (71x)
		38:    23, // '&' (71x)
		42:    24, // '*' (71x)
		43:    25, // '+' (71x)
		47:    26, // '/' (71x)
		60:    27, // '<' (71x)
		62:    28, // '>' (71x)
		94:    29, // '^' (71x)
		124:   30, // '|' (71x)
		57371: 31, // T2Comma (71x)
		57346: 32, // TAnd (71x)
		57367: 33, // TEqeq (71x)
		57378: 34, // TFloorDiv (71x)
		57370: 35, // TGte (71x)
		57377: 36, // TLshift (71x)
		57369: 37, // TLte (71x)
		57368: 38, // TNeq (71x)
		57360: 39, // TOr (71x)
		57376: 40, // TRshift (71x)
		41:    41, // ')' (67x)
		125:   42, // '}' (65x)
		93:    43, // ']' (56x)
		57363: 44, // TThen (56x)
		57402: 45, // string (49x)
		57372: 46, // T3Comma (49x)
		57403: 47, // tableconstructor (49x)
		35:    48, // '#' (47x)
		57381: 49, // afunctioncall (47x)
		57396: 50, // functioncall (47x)
		57400: 51, // prefixexp (47x)
		57352: 52, // TFalse (47x)
		57358: 53, // TNil (47x)
		57359: 54, // TNot (47x)
		57374: 55, // TNumber (47x)
		57364: 56, // TTrue (47x)
		57404: 57, // var (47x)
		57387: 58, // expr (45x)
		57395: 59, // function (45x)
		91:    60, // '[' (28x)
		46:    61, // '.' (27x)
		58:    62, // ':' (27x)
		61:    63, // '=' (12x)
		57384: 64, // chunk (12x)
		57385: 65, // chunk1 (12x)
		57383: 66, // block (11x)
		57388: 67, // exprlist (5x)
		57382: 68, // args (4x)
		57392: 69, // funcbody (3x)
		57398: 70, // namelist (3x)
		57356: 71, // TIn (3x)
		57389: 72, // field (2x)
		57386: 73, // elseifs (1x)
		57390: 74, // fieldlist (1x)
		57391: 75, // fieldsep (1x)
		57393: 76, // funcname (1x)
		57394: 77, // funcname1 (1x)
		57397: 78, // laststat (1x)
		57399: 79, // parlist (1x)
		57401: 80, // stat (1x)
		57405: 81, // varlist (1x)
		57380: 82, // $default (0x)
		57345: 83, // error (0x)
		57379: 84, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"TIdent",
		"TFunction",
		"'-'",
		"'~'",
		"TEnd",
		"';'",
		"TDo",
		"TBreak",
		"TFor",
		"TIf",
		"TLocal",
		"TRepeat",
		"TReturn",
		"TWhile",
		"TElse",
		"TElseIf",
		"TUntil",
		"$end",
		"','",
		"'{'",
		"TString",
		"'%'",
		"'&'",
		"'*'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'^'",
		"'|'",
		"T2Comma",
		"TAnd",
		"TEqeq",
		"TFloorDiv",
		"TGte",
		"TLshift",
		"TLte",
		"TNeq",
		"TOr",
		"TRshift",
		"')'",
		"'}'",
		"']'",
		"TThen",
		"string",
		"T3Comma",
		"tableconstructor",
		"'#'",
		"afunctioncall",
		"functioncall",
		"prefixexp",
		"TFalse",
		"TNil",
		"TNot",
		"TNumber",
		"TTrue",
		"var",
		"expr",
		"function",
		"'['",
		"'.'",
		"':'",
		"'='",
		"chunk",
		"chunk1",
		"block",
		"exprlist",
		"args",
		"funcbody",
		"namelist",
		"TIn",
		"field",
		"elseifs",
		"fieldlist",
		"fieldsep",
		"funcname",
		"funcname1",
		"laststat",
		"parlist",
		"stat",
		"varlist",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {64, 1},
		2:   {64, 2},
		3:   {64, 3},
		4:   {65, 0},
		5:   {65, 2},
		6:   {65, 2},
		7:   {66, 1},
		8:   {80, 3},
		9:   {80, 1},
		10:  {80, 3},
		11:  {80, 5},
		12:  {80, 4},
		13:  {80, 6},
		14:  {80, 8},
		15:  {80, 9},
		16:  {80, 11},
		17:  {80, 7},
		18:  {80, 3},
		19:  {80, 4},
		20:  {80, 4},
		21:  {80, 2},
		22:  {73, 0},
		23:  {73, 5},
		24:  {78, 1},
		25:  {78, 2},
		26:  {78, 1},
		27:  {76, 1},
		28:  {76, 3},
		29:  {77, 1},
		30:  {77, 3},
		31:  {81, 1},
		32:  {81, 3},
		33:  {57, 1},
		34:  {57, 4},
		35:  {57, 3},
		36:  {70, 1},
		37:  {70, 3},
		38:  {67, 1},
		39:  {67, 3},
		40:  {58, 1},
		41:  {58, 1},
		42:  {58, 1},
		43:  {58, 1},
		44:  {58, 1},
		45:  {58, 1},
		46:  {58, 1},
		47:  {58, 1},
		48:  {58, 1},
		49:  {58, 3},
		50:  {58, 3},
		51:  {58, 3},
		52:  {58, 3},
		53:  {58, 3},
		54:  {58, 3},
		55:  {58, 3},
		56:  {58, 3},
		57:  {58, 3},
		58:  {58, 3},
		59:  {58, 3},
		60:  {58, 3},
		61:  {58, 3},
		62:  {58, 3},
		63:  {58, 3},
		64:  {58, 3},
		65:  {58, 2},
		66:  {58, 2},
		67:  {58, 2},
		68:  {58, 3},
		69:  {58, 3},
		70:  {58, 3},
		71:  {58, 3},
		72:  {58, 3},
		73:  {58, 2},
		74:  {45, 1},
		75:  {51, 1},
		76:  {51, 1},
		77:  {51, 1},
		78:  {51, 3},
		79:  {49, 3},
		80:  {50, 2},
		81:  {50, 4},
		82:  {68, 2},
		83:  {68, 3},
		84:  {68, 1},
		85:  {68, 1},
		86:  {59, 2},
		87:  {69, 5},
		88:  {69, 4},
		89:  {79, 1},
		90:  {79, 1},
		91:  {79, 3},
		92:  {47, 2},
		93:  {47, 3},
		94:  {74, 1},
		95:  {74, 3},
		96:  {74, 2},
		97:  {72, 3},
		98:  {72, 5},
		99:  {72, 1},
		100: {75, 1},
		101: {75, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [202][]uint16{
		// 0
		{98, 98, 98, 6: 98, 98, 98, 98, 98, 98, 98, 98, 98, 18: 98, 64: 103, 104},
		{18: 102},
		{123, 120, 115, 5: 101, 107, 110, 118, 114, 113, 116, 112, 117, 111, 101, 101, 101, 101, 49: 121, 122, 109, 57: 119, 78: 105, 80: 106, 108},
		{5: 100, 303, 15: 100, 100, 100, 100},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		// 5
		{96, 96, 96, 5: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{19: 299, 63: 298},
		{228, 93, 93, 5: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 20: 142, 138, 45: 230, 47: 229, 60: 224, 225, 227, 68: 226},
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 296},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 292, 130},
		// 10
		{98, 98, 98, 6: 98, 98, 98, 98, 98, 98, 98, 98, 98, 17: 98, 64: 209, 104, 289},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 277, 130},
		{1: 258, 70: 259},
		{1: 252, 76: 250, 251},
		{1: 204, 243, 70: 244},
		// 15
		{123, 120, 141, 134, 137, 78, 78, 15: 78, 78, 78, 78, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 231, 130, 67: 242},
		{5: 76, 76, 15: 76, 76, 76, 76},
		{27, 27, 27, 5: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 71, 27, 27, 60: 27, 27, 27, 71},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 60: 69, 69, 69, 69},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 60: 26, 26, 26},
		// 20
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 60: 25, 25, 25},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 140, 124, 126, 125, 135, 128, 127, 139, 133, 130},
		{228, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 142, 138, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 230, 47: 229, 60: 224, 225, 227, 68: 226},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 22: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 22: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		// 25
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 22: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 22: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 22: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 22: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 22: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		// 30
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 22: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{3: 160, 168, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 223},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 222, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 221, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 220, 130},
		// 35
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 219, 130},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 60: 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 60: 27, 27, 27},
		{25, 3: 25, 25, 20: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 218, 60: 25, 25, 25},
		{203, 69: 202},
		// 40
		{123, 143, 141, 134, 137, 20: 142, 138, 42: 145, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 144, 130, 148, 72: 147, 74: 146},
		{69, 3: 69, 69, 6: 69, 19: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 42: 69, 60: 69, 69, 69, 200},
		{3: 160, 168, 6: 3, 19: 3, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 42: 3},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 60: 10, 10, 10},
		{6: 198, 19: 197, 42: 195, 75: 196},
		// 45
		{6: 8, 19: 8, 42: 8},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 149, 130},
		{3: 160, 168, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 43: 171},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 194, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 193, 130},
		// 50
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 192, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 191, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 190, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 189, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 188, 130},
		// 55
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 187, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 186, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 185, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 184, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 183, 130},
		// 60
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 182, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 181, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 180, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 179, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 178, 130},
		// 65
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 177, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 176, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 175, 130},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 174, 130},
		{63: 172},
		// 70
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 173, 130},
		{3: 160, 168, 6: 4, 19: 4, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 42: 4},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 22: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 22: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		// 75
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 22: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 22: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{38, 38, 38, 38, 168, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 22: 38, 166, 38, 38, 38, 38, 38, 165, 167, 38, 38, 38, 38, 38, 169, 38, 38, 38, 170, 38, 38, 38, 38},
		{39, 39, 39, 39, 168, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 22: 39, 166, 39, 39, 39, 39, 39, 165, 167, 39, 39, 39, 39, 39, 169, 39, 39, 39, 170, 39, 39, 39, 39},
		{40, 40, 40, 40, 168, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 22: 40, 166, 40, 40, 40, 40, 40, 165, 167, 40, 40, 40, 40, 40, 169, 40, 40, 40, 170, 40, 40, 40, 40},
		// 80
		{41, 41, 41, 41, 168, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22: 41, 166, 41, 41, 41, 41, 41, 165, 167, 41, 41, 41, 41, 41, 169, 41, 41, 41, 170, 41, 41, 41, 41},
		{42, 42, 42, 42, 168, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 22: 42, 166, 42, 42, 42, 42, 42, 165, 167, 42, 42, 42, 42, 42, 169, 42, 42, 42, 170, 42, 42, 42, 42},
		{43, 43, 43, 43, 168, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 22: 164, 166, 161, 43, 162, 43, 43, 165, 167, 43, 43, 43, 163, 43, 169, 43, 43, 43, 170, 43, 43, 43, 43},
		{44, 44, 44, 44, 168, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 22: 164, 166, 161, 44, 162, 44, 44, 165, 167, 44, 44, 44, 163, 44, 169, 44, 44, 44, 170, 44, 44, 44, 44},
		{45, 45, 45, 160, 168, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 22: 164, 166, 161, 159, 162, 45, 45, 165, 167, 158, 45, 45, 163, 45, 169, 45, 45, 45, 170, 45, 45, 45, 45},
		// 85
		{46, 46, 46, 160, 168, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 22: 164, 166, 161, 159, 162, 46, 46, 165, 167, 158, 46, 46, 163, 46, 169, 46, 46, 46, 170, 46, 46, 46, 46},
		{47, 47, 47, 160, 168, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 22: 164, 166, 161, 159, 162, 47, 47, 165, 167, 158, 47, 47, 163, 47, 169, 47, 47, 47, 170, 47, 47, 47, 47},
		{48, 48, 48, 160, 168, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 22: 164, 166, 161, 159, 162, 48, 48, 165, 167, 158, 48, 48, 163, 48, 169, 48, 48, 48, 170, 48, 48, 48, 48},
		{49, 49, 49, 160, 168, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 22: 164, 166, 161, 159, 162, 49, 49, 165, 167, 158, 49, 49, 163, 49, 169, 49, 49, 49, 170, 49, 49, 49, 49},
		{50, 50, 50, 160, 168, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 22: 164, 166, 161, 159, 162, 50, 50, 165, 167, 158, 50, 50, 163, 50, 169, 50, 50, 50, 170, 50, 50, 50, 50},
		// 90
		{51, 51, 51, 160, 168, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 22: 164, 166, 161, 159, 162, 51, 51, 165, 167, 158, 51, 51, 163, 51, 169, 51, 51, 51, 170, 51, 51, 51, 51},
		{52, 52, 52, 160, 168, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 52, 156, 163, 154, 169, 155, 157, 52, 170, 52, 52, 52, 52},
		{53, 53, 53, 160, 168, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 53, 170, 53, 53, 53, 53},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 60: 9, 9, 9},
		{123, 143, 141, 134, 137, 6: 6, 19: 6, 142, 138, 42: 6, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 144, 130, 148, 72: 199},
		// 95
		{2, 2, 2, 2, 2, 6: 2, 19: 2, 2, 2, 42: 2, 46: 2, 48: 2, 52: 2, 2, 2, 2, 2, 60: 2},
		{1, 1, 1, 1, 1, 6: 1, 19: 1, 1, 1, 42: 1, 46: 1, 48: 1, 52: 1, 1, 1, 1, 1, 60: 1},
		{6: 7, 19: 7, 42: 7},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 201, 130},
		{3: 160, 168, 6: 5, 19: 5, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 42: 5},
		// 100
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 22: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{1: 204, 41: 207, 46: 208, 70: 205, 79: 206},
		{66, 66, 66, 5: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 41: 66, 63: 66},
		{19: 215, 41: 12},
		{41: 212},
		// 105
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 210},
		{41: 13},
		{5: 95, 15: 95, 95, 95},
		{5: 211},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 22: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		// 110
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 213},
		{5: 214},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 22: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{1: 216, 46: 217},
		{65, 65, 65, 5: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 41: 65, 63: 65, 71: 65},
		// 115
		{41: 11},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 60: 23, 23, 23},
		{29, 29, 29, 29, 168, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 22: 29, 166, 29, 29, 29, 29, 29, 165, 167, 29, 29, 29, 29, 29, 169, 29, 29, 29, 170, 29, 29, 29, 29},
		{35, 35, 35, 35, 168, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 22: 35, 166, 35, 35, 35, 35, 35, 165, 167, 35, 35, 35, 35, 35, 169, 35, 35, 35, 170, 35, 35, 35, 35},
		{36, 36, 36, 36, 168, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 22: 36, 166, 36, 36, 36, 36, 36, 165, 167, 36, 36, 36, 36, 36, 169, 36, 36, 36, 170, 36, 36, 36, 36},
		// 120
		{37, 37, 37, 37, 168, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 22: 37, 166, 37, 37, 37, 37, 37, 165, 167, 37, 37, 37, 37, 37, 169, 37, 37, 37, 170, 37, 37, 37, 37},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 60: 24, 24, 24},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 240, 130},
		{1: 239},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 60: 22, 22, 22},
		// 125
		{1: 237},
		{123, 120, 141, 134, 137, 20: 142, 138, 41: 233, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 231, 130, 67: 232},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 60: 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 60: 17, 17, 17},
		{64, 64, 64, 160, 168, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 64},
		// 130
		{19: 234, 41: 235},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 20},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 236, 130},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 19},
		{63, 63, 63, 160, 168, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 63},
		// 135
		{228, 20: 142, 138, 45: 230, 47: 229, 68: 238},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 60: 21, 21, 21},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 60: 67, 67, 67, 67},
		{3: 160, 168, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 43: 241},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 60: 68, 68, 68, 68},
		// 140
		{5: 77, 77, 15: 77, 77, 77, 77, 234},
		{1: 248},
		{81, 81, 81, 5: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 246, 63: 245},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 231, 130, 67: 247},
		{1: 216},
		// 145
		{82, 82, 82, 5: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 234},
		{203, 69: 249},
		{83, 83, 83, 5: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{203, 69: 257},
		{75, 61: 254, 253},
		// 150
		{73, 61: 73, 73},
		{1: 256},
		{1: 255},
		{72, 61: 72, 72},
		{74},
		// 155
		{84, 84, 84, 5: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{19: 66, 63: 265, 71: 66},
		{19: 246, 71: 260},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 231, 130, 67: 261},
		{7: 262, 19: 234},
		// 160
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 263},
		{5: 264},
		{85, 85, 85, 5: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 266, 130},
		{3: 160, 168, 19: 267, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170},
		// 165
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 268, 130},
		{3: 160, 168, 7: 269, 19: 270, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170},
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 275},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 271, 130},
		{3: 160, 168, 7: 272, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170},
		// 170
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 273},
		{5: 274},
		{86, 86, 86, 5: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{5: 276},
		{87, 87, 87, 5: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 175
		{3: 160, 168, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 44: 278},
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 279},
		{5: 80, 15: 80, 80, 73: 280},
		{5: 281, 15: 282, 283},
		{89, 89, 89, 5: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		// 180
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 287},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 284, 130},
		{3: 160, 168, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170, 44: 285},
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 286},
		{5: 79, 15: 79, 79},
		// 185
		{5: 288},
		{88, 88, 88, 5: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{17: 290},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 291, 130},
		{90, 90, 90, 160, 168, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170},
		// 190
		{3: 160, 168, 7: 293, 22: 164, 166, 161, 159, 162, 153, 152, 165, 167, 158, 151, 156, 163, 154, 169, 155, 157, 150, 170},
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 64: 209, 104, 294},
		{5: 295},
		{91, 91, 91, 5: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{5: 297},
		// 195
		{92, 92, 92, 5: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{123, 120, 141, 134, 137, 20: 142, 138, 45: 131, 129, 132, 136, 121, 122, 124, 126, 125, 135, 128, 127, 139, 231, 130, 67: 302},
		{123, 120, 49: 121, 122, 301, 57: 300},
		{27, 19: 70, 27, 27, 60: 27, 27, 27, 70},
		{228, 20: 142, 138, 45: 230, 47: 229, 60: 224, 225, 227, 68: 226},
		// 200
		{94, 94, 94, 5: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 234},
		{5: 99, 15: 99, 99, 99, 99},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 83

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 2:
		{
			yyVAL.stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 3:
		{
			yyVAL.stmts = append(yyS[yypt-2].stmts, yyS[yypt-1].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 4:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 5:
		{
			yyVAL.stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
		}
	case 6:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 7:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 8:
		{
			yyVAL.stmt = &ast.AssignStmt{Lhs: yyS[yypt-2].exprlist, Rhs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-2].exprlist[0].Line())
		}
	case 9:
		{
			if _, ok := yyS[yypt-0].expr.(*ast.FuncCallExpr); !ok {
				yylex.(*Lexer).Error("parse error")
			} else {
				yyVAL.stmt = &ast.FuncCallStmt{Expr: yyS[yypt-0].expr}
				yyVAL.stmt.SetLine(yyS[yypt-0].expr.Line())
			}
		}
	case 10:
		{
			yyVAL.stmt = &ast.DoBlockStmt{Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-2].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 11:
		{
			yyVAL.stmt = &ast.WhileStmt{Condition: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-4].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 12:
		{
			yyVAL.stmt = &ast.RepeatStmt{Condition: yyS[yypt-0].expr, Stmts: yyS[yypt-2].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].expr.Line())
		}
	case 13:
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyS[yypt-4].expr, Then: yyS[yypt-2].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyS[yypt-1].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			yyVAL.stmt.SetLine(yyS[yypt-5].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 14:
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyS[yypt-6].expr, Then: yyS[yypt-4].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyS[yypt-3].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			cur.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			yyVAL.stmt.SetLine(yyS[yypt-7].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 15:
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyS[yypt-7].token.Str, Init: yyS[yypt-5].expr, Limit: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-8].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 16:
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyS[yypt-9].token.Str, Init: yyS[yypt-7].expr, Limit: yyS[yypt-5].expr, Step: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-10].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 17:
		{
			yyVAL.stmt = &ast.GenericForStmt{Names: yyS[yypt-5].namelist, Exprs: yyS[yypt-3].exprlist, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-6].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 18:
		{
			yyVAL.stmt = &ast.FuncDefStmt{Name: yyS[yypt-1].funcname, Func: yyS[yypt-0].funcexpr}
			yyVAL.stmt.SetLine(yyS[yypt-2].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 19:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: []string{yyS[yypt-1].token.Str}, Exprs: []ast.Expr{yyS[yypt-0].funcexpr}}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 20:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyS[yypt-2].namelist, Exprs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
		}
	case 21:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyS[yypt-0].namelist, Exprs: []ast.Expr{}}
			yyVAL.stmt.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 22:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 23:
		{
			yyVAL.stmts = append(yyS[yypt-4].stmts, &ast.IfStmt{Condition: yyS[yypt-2].expr, Then: yyS[yypt-0].stmts})
			yyVAL.stmts[len(yyVAL.stmts)-1].SetLine(yyS[yypt-3].token.Pos.Line)
		}
	case 24:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: nil}
			yyVAL.stmt.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 25:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 26:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 27:
		{
			yyVAL.funcname = yyS[yypt-0].funcname
		}
	case 28:
		{
			yyVAL.funcname = &ast.FuncName{Func: nil, Receiver: yyS[yypt-2].funcname.Func, Method: yyS[yypt-0].token.Str}
		}
	case 29:
		{
			yyVAL.funcname = &ast.FuncName{Func: &ast.IdentExpr{Value: yyS[yypt-0].token.Str}}
			yyVAL.funcname.Func.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 30:
		{
			key := &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			key.SetLine(yyS[yypt-0].token.Pos.Line)
			fn := &ast.AttrGetExpr{Object: yyS[yypt-2].funcname.Func, Key: key}
			fn.SetLine(yyS[yypt-0].token.Pos.Line)
			yyVAL.funcname = &ast.FuncName{Func: fn}
		}
	case 31:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 32:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}
	case 33:
		{
			yyVAL.expr = &ast.IdentExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 34:
		{
			yyVAL.expr = &ast.AttrGetExpr{Object: yyS[yypt-3].expr, Key: yyS[yypt-1].expr}
			yyVAL.expr.SetLine(yyS[yypt-3].expr.Line())
		}
	case 35:
		{
			key := &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			key.SetLine(yyS[yypt-0].token.Pos.Line)
			yyVAL.expr = &ast.AttrGetExpr{Object: yyS[yypt-2].expr, Key: key}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 36:
		{
			yyVAL.namelist = []string{yyS[yypt-0].token.Str}
		}
	case 37:
		{
			yyVAL.namelist = append(yyS[yypt-2].namelist, yyS[yypt-0].token.Str)
		}
	case 38:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}
	case 40:
		{
			yyVAL.expr = &ast.NilExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 41:
		{
			yyVAL.expr = &ast.FalseExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 42:
		{
			yyVAL.expr = &ast.TrueExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 43:
		{
			yyVAL.expr = &ast.NumberExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 44:
		{
			yyVAL.expr = &ast.Comma3Expr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 45:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 46:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 47:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 48:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 49:
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "or", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 50:
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "and", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 51:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 52:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 53:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 54:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 55:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 56:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "~=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 57:
		{
			yyVAL.expr = &ast.StringConcatOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 58:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 59:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 60:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 61:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 62:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "//", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 63:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 64:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "^", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 65:
		{
			yyVAL.expr = &ast.UnaryMinusOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 66:
		{
			yyVAL.expr = &ast.UnaryNotOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 67:
		{
			yyVAL.expr = &ast.UnaryLenOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 68:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 69:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 70:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "~", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 71:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 72:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 73:
		{
			yyVAL.expr = &ast.UnaryBitNotOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 74:
		{
			yyVAL.expr = &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 75:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 76:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 77:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 78:
		{
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 79:
		{
			yyS[yypt-1].expr.(*ast.FuncCallExpr).AdjustRet = true
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 80:
		{
			yyVAL.expr = &ast.FuncCallExpr{Func: yyS[yypt-1].expr, Args: yyS[yypt-0].exprlist}
			yyVAL.expr.SetLine(yyS[yypt-1].expr.Line())
		}
	case 81:
		{
			yyVAL.expr = &ast.FuncCallExpr{Method: yyS[yypt-1].token.Str, Receiver: yyS[yypt-3].expr, Args: yyS[yypt-0].exprlist}
			yyVAL.expr.SetLine(yyS[yypt-3].expr.Line())
		}
	case 82:
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyS[yypt-1].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = []ast.Expr{}
		}
	case 83:
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyS[yypt-2].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = yyS[yypt-1].exprlist
		}
	case 84:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 85:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 86:
		{
			yyVAL.expr = &ast.FunctionExpr{ParList: yyS[yypt-0].funcexpr.ParList, Stmts: yyS[yypt-0].funcexpr.Stmts}
			yyVAL.expr.SetLine(yyS[yypt-1].token.Pos.Line)
			yyVAL.expr.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 87:
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: yyS[yypt-3].parlist, Stmts: yyS[yypt-1].stmts}
			yyVAL.funcexpr.SetLine(yyS[yypt-4].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 88:
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: &ast.ParList{HasVargs: false, Names: []string{}}, Stmts: yyS[yypt-1].stmts}
			yyVAL.funcexpr.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 89:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
		}
	case 90:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: false, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyS[yypt-0].namelist...)
		}
	case 91:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyS[yypt-2].namelist...)
		}
	case 92:
		{
			yyVAL.expr = &ast.TableExpr{Fields: []*ast.Field{}}
			yyVAL.expr.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 93:
		{
			yyVAL.expr = &ast.TableExpr{Fields: yyS[yypt-1].fieldlist}
			yyVAL.expr.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 94:
		{
			yyVAL.fieldlist = []*ast.Field{yyS[yypt-0].field}
		}
	case 95:
		{
			yyVAL.fieldlist = append(yyS[yypt-2].fieldlist, yyS[yypt-0].field)
		}
	case 96:
		{
			yyVAL.fieldlist = yyS[yypt-1].fieldlist
		}
	case 97:
		{
			yyVAL.field = &ast.Field{Key: &ast.StringExpr{Value: yyS[yypt-2].token.Str}, Value: yyS[yypt-0].expr}
			yyVAL.field.Key.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 98:
		{
			yyVAL.field = &ast.Field{Key: yyS[yypt-3].expr, Value: yyS[yypt-0].expr}
		}
	case 99:
		{
			yyVAL.field = &ast.Field{Value: yyS[yypt-0].expr}
		}
	case 100:
		{
			yyVAL.fieldsep = ","
		}
	case 101:
		{
			yyVAL.fieldsep = ";"
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

var yyToknames = []string{

	"TAnd",      //     = 57346
	"TBreak",    //   = 57347
	"TDo",       //      = 57348
	"TElse",     //    = 57349
	"TElseIf",   //  = 57350
	"TEnd",      //     = 57351
	"TFalse",    //   = 57352
	"TFor",      //     = 57353
	"TFunction", //= 57354
	"TIf",       //      = 57355
	"TIn",       //      = 57356
	"TLocal",    //   = 57357
	"TNil",      //     = 57358
	"TNot",      //     = 57359
	"TOr",       //      = 57360
	"TReturn",   //  = 57361
	"TRepeat",   //  = 57362
	"TThen",     //    = 57363
	"TTrue",     //    = 57364
	"TUntil",    //   = 57365
	"TWhile",    //   = 57366
	"TEqeq",     //    = 57367
	"TNeq",      //     = 57368
	"TLte",      //     = 57369
	"TGte",      //     = 57370
	"T2Comma",   //  = 57371
	"T3Comma",   //  = 57372
	"TIdent",    //   = 57373
	"TNumber",   //  = 57374
	"TString",   //  = 57375
	">>",        //  = 57376
	"<<",        //  = 57377
	"TFloorDiv", // = 57378
	"UNARY",     //    = 57379
}

func TokenName(c int) string {
	if c >= TAnd && c-TAnd < len(yyToknames) {
		if yyToknames[c-TAnd] != "" {
			return yyToknames[c-TAnd]
		}
	}
	return string([]byte{byte(c)})
}
