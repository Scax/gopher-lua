// Code generated by goyacc - DO NOT EDIT.

package parse

import __yyfmt__ "fmt"

import (
	"github.com/scax/gopher-lua/ast"
)

type yySymType struct {
	yys   int
	token ast.Token

	stmts []ast.Stmt
	stmt  ast.Stmt

	funcname *ast.FuncName
	funcexpr *ast.FunctionExpr

	exprlist []ast.Expr
	expr     ast.Expr

	fieldlist []*ast.Field
	field     *ast.Field
	fieldsep  string

	namelist []string
	parlist  *ast.ParList
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57379
	yyEofCode = 57344
	T2Comma   = 57371
	T3Comma   = 57372
	TAnd      = 57346
	TBreak    = 57347
	TDo       = 57348
	TElse     = 57349
	TElseIf   = 57350
	TEnd      = 57351
	TEqeq     = 57367
	TFalse    = 57352
	TFor      = 57353
	TFunction = 57354
	TGte      = 57370
	TIdent    = 57373
	TIf       = 57355
	TIn       = 57356
	TLocal    = 57357
	TLshift   = 57377
	TLte      = 57369
	TNeq      = 57368
	TNil      = 57358
	TNot      = 57359
	TNumber   = 57374
	TOr       = 57360
	TRepeat   = 57362
	TReturn   = 57361
	TRshift   = 57376
	TString   = 57375
	TThen     = 57363
	TTrue     = 57364
	TUntil    = 57365
	TWhile    = 57366
	UNARY     = 57378
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -101
)

var (
	yyPrec = map[int]int{
		TOr:     0,
		TAnd:    1,
		'>':     2,
		'<':     2,
		TGte:    2,
		TLte:    2,
		TEqeq:   2,
		TNeq:    2,
		T2Comma: 3,
		'+':     4,
		'-':     4,
		'*':     5,
		'/':     5,
		'%':     5,
		UNARY:   6,
		'^':     7,
		'&':     8,
		'|':     8,
		'~':     8,
		TRshift: 8,
		TLshift: 8,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (146x)
		57373: 1,  // TIdent (145x)
		57354: 2,  // TFunction (134x)
		45:    3,  // '-' (116x)
		126:   4,  // '~' (116x)
		57351: 5,  // TEnd (102x)
		59:    6,  // ';' (101x)
		57348: 7,  // TDo (91x)
		57347: 8,  // TBreak (87x)
		57353: 9,  // TFor (87x)
		57355: 10, // TIf (87x)
		57357: 11, // TLocal (87x)
		57362: 12, // TRepeat (87x)
		57361: 13, // TReturn (87x)
		57366: 14, // TWhile (87x)
		57349: 15, // TElse (86x)
		57350: 16, // TElseIf (86x)
		57365: 17, // TUntil (83x)
		57344: 18, // $end (82x)
		44:    19, // ',' (81x)
		123:   20, // '{' (71x)
		57375: 21, // TString (71x)
		37:    22, // '%' (70x)
		38:    23, // '&' (70x)
		42:    24, // '*' (70x)
		43:    25, // '+' (70x)
		47:    26, // '/' (70x)
		60:    27, // '<' (70x)
		62:    28, // '>' (70x)
		94:    29, // '^' (70x)
		124:   30, // '|' (70x)
		57371: 31, // T2Comma (70x)
		57346: 32, // TAnd (70x)
		57367: 33, // TEqeq (70x)
		57370: 34, // TGte (70x)
		57377: 35, // TLshift (70x)
		57369: 36, // TLte (70x)
		57368: 37, // TNeq (70x)
		57360: 38, // TOr (70x)
		57376: 39, // TRshift (70x)
		41:    40, // ')' (66x)
		125:   41, // '}' (64x)
		93:    42, // ']' (55x)
		57363: 43, // TThen (55x)
		57401: 44, // string (48x)
		57372: 45, // T3Comma (48x)
		57402: 46, // tableconstructor (48x)
		35:    47, // '#' (46x)
		57380: 48, // afunctioncall (46x)
		57395: 49, // functioncall (46x)
		57399: 50, // prefixexp (46x)
		57352: 51, // TFalse (46x)
		57358: 52, // TNil (46x)
		57359: 53, // TNot (46x)
		57374: 54, // TNumber (46x)
		57364: 55, // TTrue (46x)
		57403: 56, // var (46x)
		57386: 57, // expr (44x)
		57394: 58, // function (44x)
		91:    59, // '[' (28x)
		46:    60, // '.' (27x)
		58:    61, // ':' (27x)
		61:    62, // '=' (12x)
		57383: 63, // chunk (12x)
		57384: 64, // chunk1 (12x)
		57382: 65, // block (11x)
		57387: 66, // exprlist (5x)
		57381: 67, // args (4x)
		57391: 68, // funcbody (3x)
		57397: 69, // namelist (3x)
		57356: 70, // TIn (3x)
		57388: 71, // field (2x)
		57385: 72, // elseifs (1x)
		57389: 73, // fieldlist (1x)
		57390: 74, // fieldsep (1x)
		57392: 75, // funcname (1x)
		57393: 76, // funcname1 (1x)
		57396: 77, // laststat (1x)
		57398: 78, // parlist (1x)
		57400: 79, // stat (1x)
		57404: 80, // varlist (1x)
		57379: 81, // $default (0x)
		57345: 82, // error (0x)
		57378: 83, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"TIdent",
		"TFunction",
		"'-'",
		"'~'",
		"TEnd",
		"';'",
		"TDo",
		"TBreak",
		"TFor",
		"TIf",
		"TLocal",
		"TRepeat",
		"TReturn",
		"TWhile",
		"TElse",
		"TElseIf",
		"TUntil",
		"$end",
		"','",
		"'{'",
		"TString",
		"'%'",
		"'&'",
		"'*'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'^'",
		"'|'",
		"T2Comma",
		"TAnd",
		"TEqeq",
		"TGte",
		"TLshift",
		"TLte",
		"TNeq",
		"TOr",
		"TRshift",
		"')'",
		"'}'",
		"']'",
		"TThen",
		"string",
		"T3Comma",
		"tableconstructor",
		"'#'",
		"afunctioncall",
		"functioncall",
		"prefixexp",
		"TFalse",
		"TNil",
		"TNot",
		"TNumber",
		"TTrue",
		"var",
		"expr",
		"function",
		"'['",
		"'.'",
		"':'",
		"'='",
		"chunk",
		"chunk1",
		"block",
		"exprlist",
		"args",
		"funcbody",
		"namelist",
		"TIn",
		"field",
		"elseifs",
		"fieldlist",
		"fieldsep",
		"funcname",
		"funcname1",
		"laststat",
		"parlist",
		"stat",
		"varlist",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {63, 1},
		2:   {63, 2},
		3:   {63, 3},
		4:   {64, 0},
		5:   {64, 2},
		6:   {64, 2},
		7:   {65, 1},
		8:   {79, 3},
		9:   {79, 1},
		10:  {79, 3},
		11:  {79, 5},
		12:  {79, 4},
		13:  {79, 6},
		14:  {79, 8},
		15:  {79, 9},
		16:  {79, 11},
		17:  {79, 7},
		18:  {79, 3},
		19:  {79, 4},
		20:  {79, 4},
		21:  {79, 2},
		22:  {72, 0},
		23:  {72, 5},
		24:  {77, 1},
		25:  {77, 2},
		26:  {77, 1},
		27:  {75, 1},
		28:  {75, 3},
		29:  {76, 1},
		30:  {76, 3},
		31:  {80, 1},
		32:  {80, 3},
		33:  {56, 1},
		34:  {56, 4},
		35:  {56, 3},
		36:  {69, 1},
		37:  {69, 3},
		38:  {66, 1},
		39:  {66, 3},
		40:  {57, 1},
		41:  {57, 1},
		42:  {57, 1},
		43:  {57, 1},
		44:  {57, 1},
		45:  {57, 1},
		46:  {57, 1},
		47:  {57, 1},
		48:  {57, 1},
		49:  {57, 3},
		50:  {57, 3},
		51:  {57, 3},
		52:  {57, 3},
		53:  {57, 3},
		54:  {57, 3},
		55:  {57, 3},
		56:  {57, 3},
		57:  {57, 3},
		58:  {57, 3},
		59:  {57, 3},
		60:  {57, 3},
		61:  {57, 3},
		62:  {57, 3},
		63:  {57, 3},
		64:  {57, 2},
		65:  {57, 2},
		66:  {57, 2},
		67:  {57, 3},
		68:  {57, 3},
		69:  {57, 3},
		70:  {57, 3},
		71:  {57, 3},
		72:  {57, 2},
		73:  {44, 1},
		74:  {50, 1},
		75:  {50, 1},
		76:  {50, 1},
		77:  {50, 3},
		78:  {48, 3},
		79:  {49, 2},
		80:  {49, 4},
		81:  {67, 2},
		82:  {67, 3},
		83:  {67, 1},
		84:  {67, 1},
		85:  {58, 2},
		86:  {68, 5},
		87:  {68, 4},
		88:  {78, 1},
		89:  {78, 1},
		90:  {78, 3},
		91:  {46, 2},
		92:  {46, 3},
		93:  {73, 1},
		94:  {73, 3},
		95:  {73, 2},
		96:  {71, 3},
		97:  {71, 5},
		98:  {71, 1},
		99:  {74, 1},
		100: {74, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [200][]uint16{
		// 0
		{97, 97, 97, 6: 97, 97, 97, 97, 97, 97, 97, 97, 97, 18: 97, 63: 102, 103},
		{18: 101},
		{122, 119, 114, 5: 100, 106, 109, 117, 113, 112, 115, 111, 116, 110, 100, 100, 100, 100, 48: 120, 121, 108, 56: 118, 77: 104, 79: 105, 107},
		{5: 99, 300, 15: 99, 99, 99, 99},
		{96, 96, 96, 5: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		// 5
		{95, 95, 95, 5: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{19: 296, 62: 295},
		{225, 92, 92, 5: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 20: 141, 137, 44: 227, 46: 226, 59: 221, 222, 224, 67: 223},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 293},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 289, 129},
		// 10
		{97, 97, 97, 6: 97, 97, 97, 97, 97, 97, 97, 97, 97, 17: 97, 63: 206, 103, 286},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 274, 129},
		{1: 255, 69: 256},
		{1: 249, 75: 247, 248},
		{1: 201, 240, 69: 241},
		// 15
		{122, 119, 140, 133, 136, 77, 77, 15: 77, 77, 77, 77, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 228, 129, 66: 239},
		{5: 75, 75, 15: 75, 75, 75, 75},
		{27, 27, 27, 5: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 70, 27, 27, 59: 27, 27, 27, 70},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 59: 68, 68, 68, 68},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 59: 26, 26, 26},
		// 20
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 59: 25, 25, 25},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 139, 123, 125, 124, 134, 127, 126, 138, 132, 129},
		{225, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 141, 137, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 227, 46: 226, 59: 221, 222, 224, 67: 223},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 22: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 22: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		// 25
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 22: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 22: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 22: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 22: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 22: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		// 30
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 22: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{3: 159, 166, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 220},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 219, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 218, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 217, 129},
		// 35
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 216, 129},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 59: 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 59: 27, 27, 27},
		{25, 3: 25, 25, 20: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 215, 59: 25, 25, 25},
		{200, 68: 199},
		// 40
		{122, 142, 140, 133, 136, 20: 141, 137, 41: 144, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 143, 129, 147, 71: 146, 73: 145},
		{68, 3: 68, 68, 6: 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 41: 68, 59: 68, 68, 68, 197},
		{3: 159, 166, 6: 3, 19: 3, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 41: 3},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 59: 10, 10, 10},
		{6: 195, 19: 194, 41: 192, 74: 193},
		// 45
		{6: 8, 19: 8, 41: 8},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 148, 129},
		{3: 159, 166, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 42: 169},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 191, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 190, 129},
		// 50
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 189, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 188, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 187, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 186, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 185, 129},
		// 55
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 184, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 183, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 182, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 181, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 180, 129},
		// 60
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 179, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 178, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 177, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 176, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 175, 129},
		// 65
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 174, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 173, 129},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 172, 129},
		{62: 170},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 171, 129},
		// 70
		{3: 159, 166, 6: 4, 19: 4, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 41: 4},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 22: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 22: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 22: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		// 75
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 22: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{38, 38, 38, 38, 166, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 22: 38, 164, 38, 38, 38, 38, 38, 163, 165, 38, 38, 38, 38, 168, 38, 38, 38, 167, 38, 38, 38, 38},
		{39, 39, 39, 39, 166, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 22: 39, 164, 39, 39, 39, 39, 39, 163, 165, 39, 39, 39, 39, 168, 39, 39, 39, 167, 39, 39, 39, 39},
		{40, 40, 40, 40, 166, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 22: 40, 164, 40, 40, 40, 40, 40, 163, 165, 40, 40, 40, 40, 168, 40, 40, 40, 167, 40, 40, 40, 40},
		{41, 41, 41, 41, 166, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22: 41, 164, 41, 41, 41, 41, 41, 163, 165, 41, 41, 41, 41, 168, 41, 41, 41, 167, 41, 41, 41, 41},
		// 80
		{42, 42, 42, 42, 166, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 22: 162, 164, 160, 42, 161, 42, 42, 163, 165, 42, 42, 42, 42, 168, 42, 42, 42, 167, 42, 42, 42, 42},
		{43, 43, 43, 43, 166, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 22: 162, 164, 160, 43, 161, 43, 43, 163, 165, 43, 43, 43, 43, 168, 43, 43, 43, 167, 43, 43, 43, 43},
		{44, 44, 44, 159, 166, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 22: 162, 164, 160, 158, 161, 44, 44, 163, 165, 157, 44, 44, 44, 168, 44, 44, 44, 167, 44, 44, 44, 44},
		{45, 45, 45, 159, 166, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 22: 162, 164, 160, 158, 161, 45, 45, 163, 165, 157, 45, 45, 45, 168, 45, 45, 45, 167, 45, 45, 45, 45},
		{46, 46, 46, 159, 166, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 22: 162, 164, 160, 158, 161, 46, 46, 163, 165, 157, 46, 46, 46, 168, 46, 46, 46, 167, 46, 46, 46, 46},
		// 85
		{47, 47, 47, 159, 166, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 22: 162, 164, 160, 158, 161, 47, 47, 163, 165, 157, 47, 47, 47, 168, 47, 47, 47, 167, 47, 47, 47, 47},
		{48, 48, 48, 159, 166, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 22: 162, 164, 160, 158, 161, 48, 48, 163, 165, 157, 48, 48, 48, 168, 48, 48, 48, 167, 48, 48, 48, 48},
		{49, 49, 49, 159, 166, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 22: 162, 164, 160, 158, 161, 49, 49, 163, 165, 157, 49, 49, 49, 168, 49, 49, 49, 167, 49, 49, 49, 49},
		{50, 50, 50, 159, 166, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 22: 162, 164, 160, 158, 161, 50, 50, 163, 165, 157, 50, 50, 50, 168, 50, 50, 50, 167, 50, 50, 50, 50},
		{51, 51, 51, 159, 166, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 51, 155, 153, 168, 154, 156, 51, 167, 51, 51, 51, 51},
		// 90
		{52, 52, 52, 159, 166, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 52, 167, 52, 52, 52, 52},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 59: 9, 9, 9},
		{122, 142, 140, 133, 136, 6: 6, 19: 6, 141, 137, 41: 6, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 143, 129, 147, 71: 196},
		{2, 2, 2, 2, 2, 6: 2, 19: 2, 2, 2, 41: 2, 45: 2, 47: 2, 51: 2, 2, 2, 2, 2, 59: 2},
		{1, 1, 1, 1, 1, 6: 1, 19: 1, 1, 1, 41: 1, 45: 1, 47: 1, 51: 1, 1, 1, 1, 1, 59: 1},
		// 95
		{6: 7, 19: 7, 41: 7},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 198, 129},
		{3: 159, 166, 6: 5, 19: 5, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 41: 5},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 22: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{1: 201, 40: 204, 45: 205, 69: 202, 78: 203},
		// 100
		{65, 65, 65, 5: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 40: 65, 62: 65},
		{19: 212, 40: 12},
		{40: 209},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 207},
		{40: 13},
		// 105
		{5: 94, 15: 94, 94, 94},
		{5: 208},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 22: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 210},
		{5: 211},
		// 110
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 22: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{1: 213, 45: 214},
		{64, 64, 64, 5: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 40: 64, 62: 64, 70: 64},
		{40: 11},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 59: 23, 23, 23},
		// 115
		{29, 29, 29, 29, 166, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 22: 29, 164, 29, 29, 29, 29, 29, 163, 165, 29, 29, 29, 29, 168, 29, 29, 29, 167, 29, 29, 29, 29},
		{35, 35, 35, 35, 166, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 22: 35, 164, 35, 35, 35, 35, 35, 163, 165, 35, 35, 35, 35, 168, 35, 35, 35, 167, 35, 35, 35, 35},
		{36, 36, 36, 36, 166, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 22: 36, 164, 36, 36, 36, 36, 36, 163, 165, 36, 36, 36, 36, 168, 36, 36, 36, 167, 36, 36, 36, 36},
		{37, 37, 37, 37, 166, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 22: 37, 164, 37, 37, 37, 37, 37, 163, 165, 37, 37, 37, 37, 168, 37, 37, 37, 167, 37, 37, 37, 37},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 59: 24, 24, 24},
		// 120
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 237, 129},
		{1: 236},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 59: 22, 22, 22},
		{1: 234},
		{122, 119, 140, 133, 136, 20: 141, 137, 40: 230, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 228, 129, 66: 229},
		// 125
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 59: 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 59: 17, 17, 17},
		{63, 63, 63, 159, 166, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 63},
		{19: 231, 40: 232},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59: 20, 20, 20},
		// 130
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 233, 129},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 59: 19, 19, 19},
		{62, 62, 62, 159, 166, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 62},
		{225, 20: 141, 137, 44: 227, 46: 226, 67: 235},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 59: 21, 21, 21},
		// 135
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 59: 66, 66, 66, 66},
		{3: 159, 166, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 42: 238},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 59: 67, 67, 67, 67},
		{5: 76, 76, 15: 76, 76, 76, 76, 231},
		{1: 245},
		// 140
		{80, 80, 80, 5: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 243, 62: 242},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 228, 129, 66: 244},
		{1: 213},
		{81, 81, 81, 5: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 231},
		{200, 68: 246},
		// 145
		{82, 82, 82, 5: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{200, 68: 254},
		{74, 60: 251, 250},
		{72, 60: 72, 72},
		{1: 253},
		// 150
		{1: 252},
		{71, 60: 71, 71},
		{73},
		{83, 83, 83, 5: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{19: 65, 62: 262, 70: 65},
		// 155
		{19: 243, 70: 257},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 228, 129, 66: 258},
		{7: 259, 19: 231},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 260},
		{5: 261},
		// 160
		{84, 84, 84, 5: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 263, 129},
		{3: 159, 166, 19: 264, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 265, 129},
		{3: 159, 166, 7: 266, 19: 267, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167},
		// 165
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 272},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 268, 129},
		{3: 159, 166, 7: 269, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 270},
		{5: 271},
		// 170
		{85, 85, 85, 5: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{5: 273},
		{86, 86, 86, 5: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{3: 159, 166, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 43: 275},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 276},
		// 175
		{5: 79, 15: 79, 79, 72: 277},
		{5: 278, 15: 279, 280},
		{88, 88, 88, 5: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 284},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 281, 129},
		// 180
		{3: 159, 166, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167, 43: 282},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 283},
		{5: 78, 15: 78, 78},
		{5: 285},
		{87, 87, 87, 5: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 185
		{17: 287},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 288, 129},
		{89, 89, 89, 159, 166, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167},
		{3: 159, 166, 7: 290, 22: 162, 164, 160, 158, 161, 152, 151, 163, 165, 157, 150, 155, 153, 168, 154, 156, 149, 167},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 206, 103, 291},
		// 190
		{5: 292},
		{90, 90, 90, 5: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{5: 294},
		{91, 91, 91, 5: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{122, 119, 140, 133, 136, 20: 141, 137, 44: 130, 128, 131, 135, 120, 121, 123, 125, 124, 134, 127, 126, 138, 228, 129, 66: 299},
		// 195
		{122, 119, 48: 120, 121, 298, 56: 297},
		{27, 19: 69, 27, 27, 59: 27, 27, 27, 69},
		{225, 20: 141, 137, 44: 227, 46: 226, 59: 221, 222, 224, 67: 223},
		{93, 93, 93, 5: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 231},
		{5: 98, 15: 98, 98, 98, 98},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 82

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 2:
		{
			yyVAL.stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 3:
		{
			yyVAL.stmts = append(yyS[yypt-2].stmts, yyS[yypt-1].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 4:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 5:
		{
			yyVAL.stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
		}
	case 6:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 7:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 8:
		{
			yyVAL.stmt = &ast.AssignStmt{Lhs: yyS[yypt-2].exprlist, Rhs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-2].exprlist[0].Line())
		}
	case 9:
		{
			if _, ok := yyS[yypt-0].expr.(*ast.FuncCallExpr); !ok {
				yylex.(*Lexer).Error("parse error")
			} else {
				yyVAL.stmt = &ast.FuncCallStmt{Expr: yyS[yypt-0].expr}
				yyVAL.stmt.SetLine(yyS[yypt-0].expr.Line())
			}
		}
	case 10:
		{
			yyVAL.stmt = &ast.DoBlockStmt{Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-2].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 11:
		{
			yyVAL.stmt = &ast.WhileStmt{Condition: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-4].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 12:
		{
			yyVAL.stmt = &ast.RepeatStmt{Condition: yyS[yypt-0].expr, Stmts: yyS[yypt-2].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].expr.Line())
		}
	case 13:
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyS[yypt-4].expr, Then: yyS[yypt-2].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyS[yypt-1].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			yyVAL.stmt.SetLine(yyS[yypt-5].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 14:
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyS[yypt-6].expr, Then: yyS[yypt-4].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyS[yypt-3].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			cur.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			yyVAL.stmt.SetLine(yyS[yypt-7].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 15:
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyS[yypt-7].token.Str, Init: yyS[yypt-5].expr, Limit: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-8].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 16:
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyS[yypt-9].token.Str, Init: yyS[yypt-7].expr, Limit: yyS[yypt-5].expr, Step: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-10].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 17:
		{
			yyVAL.stmt = &ast.GenericForStmt{Names: yyS[yypt-5].namelist, Exprs: yyS[yypt-3].exprlist, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-6].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 18:
		{
			yyVAL.stmt = &ast.FuncDefStmt{Name: yyS[yypt-1].funcname, Func: yyS[yypt-0].funcexpr}
			yyVAL.stmt.SetLine(yyS[yypt-2].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 19:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: []string{yyS[yypt-1].token.Str}, Exprs: []ast.Expr{yyS[yypt-0].funcexpr}}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 20:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyS[yypt-2].namelist, Exprs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
		}
	case 21:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyS[yypt-0].namelist, Exprs: []ast.Expr{}}
			yyVAL.stmt.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 22:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 23:
		{
			yyVAL.stmts = append(yyS[yypt-4].stmts, &ast.IfStmt{Condition: yyS[yypt-2].expr, Then: yyS[yypt-0].stmts})
			yyVAL.stmts[len(yyVAL.stmts)-1].SetLine(yyS[yypt-3].token.Pos.Line)
		}
	case 24:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: nil}
			yyVAL.stmt.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 25:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 26:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 27:
		{
			yyVAL.funcname = yyS[yypt-0].funcname
		}
	case 28:
		{
			yyVAL.funcname = &ast.FuncName{Func: nil, Receiver: yyS[yypt-2].funcname.Func, Method: yyS[yypt-0].token.Str}
		}
	case 29:
		{
			yyVAL.funcname = &ast.FuncName{Func: &ast.IdentExpr{Value: yyS[yypt-0].token.Str}}
			yyVAL.funcname.Func.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 30:
		{
			key := &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			key.SetLine(yyS[yypt-0].token.Pos.Line)
			fn := &ast.AttrGetExpr{Object: yyS[yypt-2].funcname.Func, Key: key}
			fn.SetLine(yyS[yypt-0].token.Pos.Line)
			yyVAL.funcname = &ast.FuncName{Func: fn}
		}
	case 31:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 32:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}
	case 33:
		{
			yyVAL.expr = &ast.IdentExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 34:
		{
			yyVAL.expr = &ast.AttrGetExpr{Object: yyS[yypt-3].expr, Key: yyS[yypt-1].expr}
			yyVAL.expr.SetLine(yyS[yypt-3].expr.Line())
		}
	case 35:
		{
			key := &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			key.SetLine(yyS[yypt-0].token.Pos.Line)
			yyVAL.expr = &ast.AttrGetExpr{Object: yyS[yypt-2].expr, Key: key}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 36:
		{
			yyVAL.namelist = []string{yyS[yypt-0].token.Str}
		}
	case 37:
		{
			yyVAL.namelist = append(yyS[yypt-2].namelist, yyS[yypt-0].token.Str)
		}
	case 38:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}
	case 40:
		{
			yyVAL.expr = &ast.NilExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 41:
		{
			yyVAL.expr = &ast.FalseExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 42:
		{
			yyVAL.expr = &ast.TrueExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 43:
		{
			yyVAL.expr = &ast.NumberExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 44:
		{
			yyVAL.expr = &ast.Comma3Expr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 45:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 46:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 47:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 48:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 49:
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "or", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 50:
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "and", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 51:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 52:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 53:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 54:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 55:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 56:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "~=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 57:
		{
			yyVAL.expr = &ast.StringConcatOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 58:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 59:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 60:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 61:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 62:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 63:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "^", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 64:
		{
			yyVAL.expr = &ast.UnaryMinusOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 65:
		{
			yyVAL.expr = &ast.UnaryNotOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 66:
		{
			yyVAL.expr = &ast.UnaryLenOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 67:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 68:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 69:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "~", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 70:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 71:
		{
			yyVAL.expr = &ast.BitArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 72:
		{
			yyVAL.expr = &ast.UnaryBitNotOpExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 73:
		{
			yyVAL.expr = &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 74:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 75:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 76:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 77:
		{
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 78:
		{
			yyS[yypt-1].expr.(*ast.FuncCallExpr).AdjustRet = true
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 79:
		{
			yyVAL.expr = &ast.FuncCallExpr{Func: yyS[yypt-1].expr, Args: yyS[yypt-0].exprlist}
			yyVAL.expr.SetLine(yyS[yypt-1].expr.Line())
		}
	case 80:
		{
			yyVAL.expr = &ast.FuncCallExpr{Method: yyS[yypt-1].token.Str, Receiver: yyS[yypt-3].expr, Args: yyS[yypt-0].exprlist}
			yyVAL.expr.SetLine(yyS[yypt-3].expr.Line())
		}
	case 81:
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyS[yypt-1].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = []ast.Expr{}
		}
	case 82:
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyS[yypt-2].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = yyS[yypt-1].exprlist
		}
	case 83:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 84:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 85:
		{
			yyVAL.expr = &ast.FunctionExpr{ParList: yyS[yypt-0].funcexpr.ParList, Stmts: yyS[yypt-0].funcexpr.Stmts}
			yyVAL.expr.SetLine(yyS[yypt-1].token.Pos.Line)
			yyVAL.expr.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 86:
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: yyS[yypt-3].parlist, Stmts: yyS[yypt-1].stmts}
			yyVAL.funcexpr.SetLine(yyS[yypt-4].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 87:
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: &ast.ParList{HasVargs: false, Names: []string{}}, Stmts: yyS[yypt-1].stmts}
			yyVAL.funcexpr.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 88:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
		}
	case 89:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: false, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyS[yypt-0].namelist...)
		}
	case 90:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyS[yypt-2].namelist...)
		}
	case 91:
		{
			yyVAL.expr = &ast.TableExpr{Fields: []*ast.Field{}}
			yyVAL.expr.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 92:
		{
			yyVAL.expr = &ast.TableExpr{Fields: yyS[yypt-1].fieldlist}
			yyVAL.expr.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 93:
		{
			yyVAL.fieldlist = []*ast.Field{yyS[yypt-0].field}
		}
	case 94:
		{
			yyVAL.fieldlist = append(yyS[yypt-2].fieldlist, yyS[yypt-0].field)
		}
	case 95:
		{
			yyVAL.fieldlist = yyS[yypt-1].fieldlist
		}
	case 96:
		{
			yyVAL.field = &ast.Field{Key: &ast.StringExpr{Value: yyS[yypt-2].token.Str}, Value: yyS[yypt-0].expr}
			yyVAL.field.Key.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 97:
		{
			yyVAL.field = &ast.Field{Key: yyS[yypt-3].expr, Value: yyS[yypt-0].expr}
		}
	case 98:
		{
			yyVAL.field = &ast.Field{Value: yyS[yypt-0].expr}
		}
	case 99:
		{
			yyVAL.fieldsep = ","
		}
	case 100:
		{
			yyVAL.fieldsep = ";"
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

var yyToknames = []string{

	"TAnd",      //     = 57346
	"TBreak",    //   = 57347
	"TDo",       //      = 57348
	"TElse",     //    = 57349
	"TElseIf",   //  = 57350
	"TEnd",      //     = 57351
	"TFalse",    //   = 57352
	"TFor",      //     = 57353
	"TFunction", //= 57354
	"TIf",       //      = 57355
	"TIn",       //      = 57356
	"TLocal",    //   = 57357
	"TNil",      //     = 57358
	"TNot",      //     = 57359
	"TOr",       //      = 57360
	"TReturn",   //  = 57361
	"TRepeat",   //  = 57362
	"TThen",     //    = 57363
	"TTrue",     //    = 57364
	"TUntil",    //   = 57365
	"TWhile",    //   = 57366
	"TEqeq",     //    = 57367
	"TNeq",      //     = 57368
	"TLte",      //     = 57369
	"TGte",      //     = 57370
	"T2Comma",   //  = 57371
	"T3Comma",   //  = 57372
	"TIdent",    //   = 57373
	"TNumber",   //  = 57374
	"TString",   //  = 57375
	">>",        //  = 57376
	"<<",        //  = 57377
	"UNARY",     //    = 57378
}

func TokenName(c int) string {
	if c >= TAnd && c-TAnd < len(yyToknames) {
		if yyToknames[c-TAnd] != "" {
			return yyToknames[c-TAnd]
		}
	}
	return string([]byte{byte(c)})
}
